plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.4.0"
}

allprojects {
    group = "net.cloudopt.next"
    version = property("project_version")
    sourceCompatibility = property("java_version")
    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/repositories/central/" }
        maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
        mavenCentral()
    }
}

subprojects {

    buildscript {
        repositories {
            maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
            gradlePluginPortal()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${property('kotlin_version')}"
            classpath "org.jetbrains.kotlin:kotlin-allopen:${property('kotlin_version')}"
            classpath "org.jetbrains.kotlin:kotlin-noarg:${property('kotlin_version')}"
        }

    }

    test {
        useJUnitPlatform()
    }

    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "maven-publish"
    apply plugin: 'signing'

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:${property('kotlinx_version')}"
        implementation "org.jetbrains.kotlin:kotlin-reflect:${property('kotlin_version')}"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${property('kotlinx_version')}"
        testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${property('kotlinx_version')}"
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${property('kotlin_version')}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.0"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.0"
    }

    compileKotlin {
        kotlinOptions.jvmTarget = rootProject.property("java_version")
        kotlinOptions.useIR = true
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = rootProject.property("java_version")
        kotlinOptions.useIR = true
    }

    task sourceJar(type: Jar, dependsOn: classes) { from sourceSets.main.allSource }


    apply plugin: 'maven-publish'

    System.out.println(System.getenv("SONATYPE_USERNAME"))

    plugins.withId("maven-publish") {
        publishing {
            publications {
                maven(MavenPublication) {
                    // from components.java

                    pom {
                        name = project.group + ":" + project.name
                        url = 'https://github.com/grpc/grpc-kotlin'
                        afterEvaluate {
                            // description is not available until evaluated.
                            description = project.description
                        }

                        scm {
                            connection = "scm:git:https://github.com/cloudoptlab/cloudopt-next.git"
                            developerConnection = "scm:git:git@github.com:cloudoptlab/cloudopt-next.git"
                            url = "https://github.com/cloudoptlab/cloudopt-next"
                        }

                        licenses {
                            license {
                                name = "Apache 2.0"
                                url = "https://opensource.org/licenses/Apache-2.0"
                            }
                        }

                        developers {
                            developer {
                                id = "cloudopt.net"
                                name = "Cloudopt"
                                email = "support@cloudopt.net"
                                url = "https://www.cloudopt.net/"
                                organization = "Cloudopt"
                                organizationUrl = "https://www.cloudopt.net/"
                            }
                        }
                    }
                }
            }
            repositories {
                maven {
                    def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                    def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                    url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl
                    credentials {
                        username System.getenv("SONATYPE_USERNAME") ?: ""
                        password System.getenv("SONATYPE_PASSWORD") ?: ""
                    }
                }
            }
        }
    }

    if (project.hasProperty("signing.keyId")) {
        apply plugin: 'signing'
        signing {
            sign publishing.publications
        }
    }

}
